#include "GameScene.h"

GameScene::GameScene() {}

GameScene::~GameScene() 
{
	delete sprite_;
	delete model_;
	delete debugCamera_;
}

void GameScene::Initialize() 
{
	// 必須？
	dxCommon_ = DirectXCommon::GetInstance();
	// ファイルを指定してテクスチャを読み込む
	textureHandle_ = TextureManager::Load("uvChecker.png");
	// スプライトの生成
	sprite_ = Sprite::Create(textureHandle_, {0, 0});
	// 3dモデルの生成
	model_ = Model::Create();

	// サウンド関連
	audio_ = Audio::GetInstance();
	// サウンドデータの読み込み
	fanfareSoundHandle_ = audio_->LoadWave("fanfare.wav");
	// サウンド再生
	audio_->PlayWave(fanfareSoundHandle_);
	// サウンド再生
	fanfareVoiceHandle_ = audio_->PlayWave(fanfareSoundHandle_, true);

	// 汎用
	input_ = Input::GetInstance();

	// ワールドトランスフォームの初期化
	worldTransform_.Initialize();
	// カメラの初期化
	camera_.Initialize();
	PrimitiveDrawer::GetInstance()->SetViewProjection(&camera_);

	// デバッグカメラの生成
	debugCamera_ = new DebugCamera(1280, 720);

	// 軸方向表示の表示を有効にする
	AxisIndicator::GetInstance()->SetVisible(true);
	// 軸方向表示が参照するビュープロジェクションを指定する
	AxisIndicator::GetInstance()->SetTargetCamera(&debugCamera_->GetCamera());
}

void GameScene::Update() 
{
	// スプライトの座標を取得
	Vector2 pos_ = sprite_->GetPosition();
	// 座標を移動
	pos_.x += 0.1f;
	pos_.y += 0.1f;
	// 移動した座標を反映
	sprite_->SetPosition(pos_);

	// スペースキーを押した瞬間
	if (input_->TriggerKey(DIK_SPACE)) 
	{
		// 音声停止
		audio_->StopWave(fanfareVoiceHandle_);
	}

	#ifdef _DEBUG

	// ウィンドウ作成 BeginとEndで挟む
	ImGui::Begin("Debug1");
	// デバッグテキストの表示
	ImGui::Text("Asakawa Sakuto %d.%d.%d", 2005, 05, 10);
	ImGui::End();

	ImGui::Begin("Debug2");
	// float3入力ボックス
	ImGui::InputFloat3("InputFloat", inputFloat);
	// float3スライダー
	ImGui::SliderFloat3("SliderFloat", inputFloat, 0.0f, 1.0f);
	ImGui::End();

    // デモウィンドウの表示を有効化
	ImGui::ShowDemoWindow();

	#endif // DEBUG

	// デバッグカメラの更新
	debugCamera_->Update();
}

void GameScene::Draw() 
{
	// コマンドリストの取得
	ID3D12GraphicsCommandList* commandList = dxCommon_->GetCommandList();

#pragma region 背景スプライト描画

	// 背景スプライト描画前処理
	Sprite::PreDraw(commandList);

	/// <summary>
	/// ここに背景スプライトの描画処理を追加できる
	/// </summary>
	
	// スプライト描画後処理
	Sprite::PostDraw();

	// 深度バッファクリア
	dxCommon_->ClearDepthBuffer();

#pragma endregion

#pragma region 3Dオブジェクト描画

	// 3Dオブジェクト描画前処理
	Model::PreDraw(commandList);

	/// <summary>
	/// ここに3Dオブジェクトの描画処理を追加できる
	/// </summary>
	
	// 3dモデル描画
	model_->Draw(worldTransform_, debugCamera_->GetCamera(), textureHandle_);

	// 3Dオブジェクト描画後処理
	Model::PostDraw();

#pragma endregion

	// ラインを描画する                           //始点座標   //終点座標   //色(RGBA)
	PrimitiveDrawer::GetInstance()->DrawLine3d({0, 0, 0}, {0, 10, 0}, {1.f, 0.f, 0.f, 1.f});

#pragma region 前景スプライト描画

	// 前景スプライト描画前処理
	Sprite::PreDraw(commandList);

	/// <summary>
	/// ここに前景スプライトの描画処理を追加できる
	/// </summary>
	
	// スプライトの描画
	sprite_->Draw();

	// スプライト描画後処理
	Sprite::PostDraw();

#pragma endregion
}